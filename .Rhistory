"Dietary Fiber(g)", "Protein(g)")
colnames(drinks) <- c("Beverage_Category", "Beverage", "Beverage_Prep",
"Calories", "Total_Fat(g)", "Trans_Fat(g)",
"Saturated_Fat(g)", "Sodium(mg)", "Total_Carbohydrates(g)",
"Cholesterol(mg)", "Dietary_Fiber(g)", "Sugars(g)",
"Protein(g)", "Vitamin_A(%DV)", "Vitamin_C(%DV)",
"Calcium(%DV)", "Iron(%DV)", "Caffeine(mg)")
items <- as.character(food$Food)
items <- sort(items)
items <- c("All", items)
type <- drinks %>%
group_by(Beverage_Category) %>%
count()
types <- as.character(type$Beverage_Category)
types[10] <- "All"
types <- sort(types)
caffeine_data <- menu %>%
select(Beverage_Category, Beverage, `Caffeine(mg)`)
#There are 64mg of caffeine in each shot of expresso.
caffeine_data$num_expresso_shot <-  round(as.numeric(caffeine_data$`Caffeine(mg)`) / 64, digits = 2)
caffeine_varies <- filter(caffeine_data, is.na(caffeine_data$num_expresso_shot))
caffeine_data_num <- filter(caffeine_data, !is.na(caffeine_data$num_expresso_shot))
colnames(caffeine_data_num)[colnames(caffeine_data_num) == "Caffeine(mg)"] <- "Caffeine_mg"
beverage_type <- caffeine_data$Beverage_Category
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(mean(as.numeric(Caffeine_mg)))
View(caffeine_data_num)
View(caffeine_data_num)
View(avg_caffeine)
View(avg_caffeine)
colnames(avg_caffeine)[colnames(avg_caffeine) == "mean(as.numeric(Caffeine_mg))"] <- "Avg_Caffeine_mg"
View(avg_caffeine)
View(avg_caffeine)
library(dplyr)
food <- read.csv(
con <- file("test3/starbucks-menu/starbucks-menu-nutrition-food.csv",
encoding = "UCS-2LE"))
drinks <- read.csv("data/starbucks_drinkMenu_expanded.csv")
colnames(food) <- c("Food", "Calories", "Fat(g)", "Carbohydrates(g)",
"Dietary Fiber(g)", "Protein(g)")
colnames(drinks) <- c("Beverage_Category", "Beverage", "Beverage_Prep",
"Calories", "Total_Fat(g)", "Trans_Fat(g)",
"Saturated_Fat(g)", "Sodium(mg)", "Total_Carbohydrates(g)",
"Cholesterol(mg)", "Dietary_Fiber(g)", "Sugars(g)",
"Protein(g)", "Vitamin_A(%DV)", "Vitamin_C(%DV)",
"Calcium(%DV)", "Iron(%DV)", "Caffeine(mg)")
items <- as.character(food$Food)
items <- sort(items)
items <- c("All", items)
type <- drinks %>%
group_by(Beverage_Category) %>%
count()
types <- as.character(type$Beverage_Category)
types[10] <- "All"
types <- sort(types)
caffeine_data <- menu %>%
select(Beverage_Category, Beverage, `Caffeine(mg)`)
#There are 64mg of caffeine in each shot of expresso.
caffeine_data$num_expresso_shot <-  round(as.numeric(caffeine_data$`Caffeine(mg)`) / 64, digits = 2)
caffeine_varies <- filter(caffeine_data, is.na(caffeine_data$num_expresso_shot))
caffeine_data_num <- filter(caffeine_data, !is.na(caffeine_data$num_expresso_shot))
colnames(caffeine_data_num)[colnames(caffeine_data_num) == "Caffeine(mg)"] <- "Caffeine_mg"
beverage_type <- caffeine_data$Beverage_Category
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(mean(as.numeric(Caffeine_mg)))
colnames(avg_caffeine)[colnames(avg_caffeine) == "mean(as.numeric(Caffeine_mg))"] <- "Avg_Caffeine_mg"
avg_caffeine$avg_expresso_shot <- avg_caffeine$Avg_Caffeine_mg / 64
View(avg_caffeine)
View(avg_caffeine)
library(dplyr)
food <- read.csv(
con <- file("test3/starbucks-menu/starbucks-menu-nutrition-food.csv",
encoding = "UCS-2LE"))
drinks <- read.csv("data/starbucks_drinkMenu_expanded.csv")
colnames(food) <- c("Food", "Calories", "Fat(g)", "Carbohydrates(g)",
"Dietary Fiber(g)", "Protein(g)")
colnames(drinks) <- c("Beverage_Category", "Beverage", "Beverage_Prep",
"Calories", "Total_Fat(g)", "Trans_Fat(g)",
"Saturated_Fat(g)", "Sodium(mg)", "Total_Carbohydrates(g)",
"Cholesterol(mg)", "Dietary_Fiber(g)", "Sugars(g)",
"Protein(g)", "Vitamin_A(%DV)", "Vitamin_C(%DV)",
"Calcium(%DV)", "Iron(%DV)", "Caffeine(mg)")
items <- as.character(food$Food)
items <- sort(items)
items <- c("All", items)
type <- drinks %>%
group_by(Beverage_Category) %>%
count()
types <- as.character(type$Beverage_Category)
types[10] <- "All"
types <- sort(types)
caffeine_data <- menu %>%
select(Beverage_Category, Beverage, `Caffeine(mg)`)
#There are 64mg of caffeine in each shot of expresso.
caffeine_data$num_expresso_shot <-  round(as.numeric(caffeine_data$`Caffeine(mg)`) / 64, digits = 2)
caffeine_varies <- filter(caffeine_data, is.na(caffeine_data$num_expresso_shot))
caffeine_data_num <- filter(caffeine_data, !is.na(caffeine_data$num_expresso_shot))
colnames(caffeine_data_num)[colnames(caffeine_data_num) == "Caffeine(mg)"] <- "Caffeine_mg"
beverage_type <- caffeine_data$Beverage_Category
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(round(mean(as.numeric(Caffeine_mg)), digits = 2))
colnames(avg_caffeine)[colnames(avg_caffeine) == "mean(as.numeric(Caffeine_mg))"] <- "Avg_Caffeine_mg"
avg_caffeine$avg_expresso_shot <- round(avg_caffeine$Avg_Caffeine_mg / 64, digits = 2)
library(dplyr)
food <- read.csv(
con <- file("test3/starbucks-menu/starbucks-menu-nutrition-food.csv",
encoding = "UCS-2LE"))
drinks <- read.csv("data/starbucks_drinkMenu_expanded.csv")
colnames(food) <- c("Food", "Calories", "Fat(g)", "Carbohydrates(g)",
"Dietary Fiber(g)", "Protein(g)")
colnames(drinks) <- c("Beverage_Category", "Beverage", "Beverage_Prep",
"Calories", "Total_Fat(g)", "Trans_Fat(g)",
"Saturated_Fat(g)", "Sodium(mg)", "Total_Carbohydrates(g)",
"Cholesterol(mg)", "Dietary_Fiber(g)", "Sugars(g)",
"Protein(g)", "Vitamin_A(%DV)", "Vitamin_C(%DV)",
"Calcium(%DV)", "Iron(%DV)", "Caffeine(mg)")
items <- as.character(food$Food)
items <- sort(items)
items <- c("All", items)
type <- drinks %>%
group_by(Beverage_Category) %>%
count()
types <- as.character(type$Beverage_Category)
types[10] <- "All"
types <- sort(types)
caffeine_data <- menu %>%
select(Beverage_Category, Beverage, `Caffeine(mg)`)
#There are 64mg of caffeine in each shot of expresso.
caffeine_data$num_expresso_shot <-  round(as.numeric(caffeine_data$`Caffeine(mg)`) / 64, digits = 2)
caffeine_varies <- filter(caffeine_data, is.na(caffeine_data$num_expresso_shot))
caffeine_data_num <- filter(caffeine_data, !is.na(caffeine_data$num_expresso_shot))
colnames(caffeine_data_num)[colnames(caffeine_data_num) == "Caffeine(mg)"] <- "Caffeine_mg"
beverage_type <- caffeine_data$Beverage_Category
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(round(mean(as.numeric(Caffeine_mg)), digits = 2))
colnames(avg_caffeine)[colnames(avg_caffeine) == "mean(as.numeric(Caffeine_mg))"] <- "Avg_Caffeine_mg"
avg_caffeine$avg_expresso_shot <- round((avg_caffeine$Avg_Caffeine_mg / 64), digits = 2)
library(dplyr)
food <- read.csv(
con <- file("test3/starbucks-menu/starbucks-menu-nutrition-food.csv",
encoding = "UCS-2LE"))
drinks <- read.csv("data/starbucks_drinkMenu_expanded.csv")
colnames(food) <- c("Food", "Calories", "Fat(g)", "Carbohydrates(g)",
"Dietary Fiber(g)", "Protein(g)")
colnames(drinks) <- c("Beverage_Category", "Beverage", "Beverage_Prep",
"Calories", "Total_Fat(g)", "Trans_Fat(g)",
"Saturated_Fat(g)", "Sodium(mg)", "Total_Carbohydrates(g)",
"Cholesterol(mg)", "Dietary_Fiber(g)", "Sugars(g)",
"Protein(g)", "Vitamin_A(%DV)", "Vitamin_C(%DV)",
"Calcium(%DV)", "Iron(%DV)", "Caffeine(mg)")
items <- as.character(food$Food)
items <- sort(items)
items <- c("All", items)
type <- drinks %>%
group_by(Beverage_Category) %>%
count()
types <- as.character(type$Beverage_Category)
types[10] <- "All"
types <- sort(types)
caffeine_data <- menu %>%
select(Beverage_Category, Beverage, `Caffeine(mg)`)
#There are 64mg of caffeine in each shot of expresso.
caffeine_data$num_expresso_shot <-  round(as.numeric(caffeine_data$`Caffeine(mg)`) / 64, digits = 2)
caffeine_varies <- filter(caffeine_data, is.na(caffeine_data$num_expresso_shot))
caffeine_data_num <- filter(caffeine_data, !is.na(caffeine_data$num_expresso_shot))
colnames(caffeine_data_num)[colnames(caffeine_data_num) == "Caffeine(mg)"] <- "Caffeine_mg"
beverage_type <- caffeine_data$Beverage_Category
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(round(mean(as.numeric(Caffeine_mg)), digits = 2))
colnames(avg_caffeine)[colnames(avg_caffeine) == "mean(as.numeric(Caffeine_mg))"] <- "Avg_Caffeine_mg"
avg_caffeine$avg_expresso_shot <- round(avg_caffeine$Avg_Caffeine_mg / 64, digits = 2)
View(average_caffeine)
View(average_caffeine)
View(avg_caffeine)
View(avg_caffeine)
library(dplyr)
food <- read.csv(
con <- file("test3/starbucks-menu/starbucks-menu-nutrition-food.csv",
encoding = "UCS-2LE"))
drinks <- read.csv("data/starbucks_drinkMenu_expanded.csv")
colnames(food) <- c("Food", "Calories", "Fat(g)", "Carbohydrates(g)",
"Dietary Fiber(g)", "Protein(g)")
colnames(drinks) <- c("Beverage_Category", "Beverage", "Beverage_Prep",
"Calories", "Total_Fat(g)", "Trans_Fat(g)",
"Saturated_Fat(g)", "Sodium(mg)", "Total_Carbohydrates(g)",
"Cholesterol(mg)", "Dietary_Fiber(g)", "Sugars(g)",
"Protein(g)", "Vitamin_A(%DV)", "Vitamin_C(%DV)",
"Calcium(%DV)", "Iron(%DV)", "Caffeine(mg)")
items <- as.character(food$Food)
items <- sort(items)
items <- c("All", items)
type <- drinks %>%
group_by(Beverage_Category) %>%
count()
types <- as.character(type$Beverage_Category)
types[10] <- "All"
types <- sort(types)
caffeine_data <- menu %>%
select(Beverage_Category, Beverage, `Caffeine(mg)`)
#There are 64mg of caffeine in each shot of expresso.
caffeine_data$num_expresso_shot <-  round(as.numeric(caffeine_data$`Caffeine(mg)`) / 64, digits = 2)
caffeine_varies <- filter(caffeine_data, is.na(caffeine_data$num_expresso_shot))
caffeine_data_num <- filter(caffeine_data, !is.na(caffeine_data$num_expresso_shot))
colnames(caffeine_data_num)[colnames(caffeine_data_num) == "Caffeine(mg)"] <- "Caffeine_mg"
beverage_type <- caffeine_data$Beverage_Category
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(round(mean(as.numeric(Caffeine_mg)), digits = 2))
#colnames(avg_caffeine)[colnames(avg_caffeine) == "mean(as.numeric(Caffeine_mg))"] <- "Avg_Caffeine_mg"
#avg_caffeine$avg_expresso_shot <- round(avg_caffeine$Avg_Caffeine_mg / 64, digits = 2)
View(avg_caffeine)
View(avg_caffeine)
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(Avg_Caffeine_mg = round(mean(as.numeric(Caffeine_mg)), digits = 2))
View(avg_caffeine)
View(avg_caffeine)
library(dplyr)
food <- read.csv(
con <- file("test3/starbucks-menu/starbucks-menu-nutrition-food.csv",
encoding = "UCS-2LE"))
drinks <- read.csv("data/starbucks_drinkMenu_expanded.csv")
colnames(food) <- c("Food", "Calories", "Fat(g)", "Carbohydrates(g)",
"Dietary Fiber(g)", "Protein(g)")
colnames(drinks) <- c("Beverage_Category", "Beverage", "Beverage_Prep",
"Calories", "Total_Fat(g)", "Trans_Fat(g)",
"Saturated_Fat(g)", "Sodium(mg)", "Total_Carbohydrates(g)",
"Cholesterol(mg)", "Dietary_Fiber(g)", "Sugars(g)",
"Protein(g)", "Vitamin_A(%DV)", "Vitamin_C(%DV)",
"Calcium(%DV)", "Iron(%DV)", "Caffeine(mg)")
items <- as.character(food$Food)
items <- sort(items)
items <- c("All", items)
type <- drinks %>%
group_by(Beverage_Category) %>%
count()
types <- as.character(type$Beverage_Category)
types[10] <- "All"
types <- sort(types)
caffeine_data <- menu %>%
select(Beverage_Category, Beverage, `Caffeine(mg)`)
#There are 64mg of caffeine in each shot of expresso.
caffeine_data$num_expresso_shot <-  round(as.numeric(caffeine_data$`Caffeine(mg)`) / 64, digits = 2)
caffeine_varies <- filter(caffeine_data, is.na(caffeine_data$num_expresso_shot))
caffeine_data_num <- filter(caffeine_data, !is.na(caffeine_data$num_expresso_shot))
colnames(caffeine_data_num)[colnames(caffeine_data_num) == "Caffeine(mg)"] <- "Caffeine_mg"
beverage_type <- caffeine_data$Beverage_Category
avg_caffeine <- caffeine_data_num %>%
group_by(Beverage_Category) %>%
select(Beverage_Category, Caffeine_mg) %>%
summarise(Avg_Caffeine_mg = round(mean(as.numeric(Caffeine_mg)), digits = 2))
avg_caffeine$avg_expresso_shot <- round(avg_caffeine$Avg_Caffeine_mg / 64, digits = 2)
View(avg_caffeine)
View(average_caffeine)
View(average_caffeine)
View(avg_caffeine)
View(avg_caffeine)
# Load Libraries
library(tidyverse)
library(leaflet)
library(shiny)
source("prepare_map.R")
source("prepare_table.R")
shinyServer(function(input, output) {
# render the first object defined in tab_one
## todo:
## output$SOME_NAME_ONE <-
filtered <- reactive({
directory <- directory[(directory$Ownership.Type %in% input$check), ]
directory %>%
filter(country_name == input$search) %>%
mutate(description = paste("City:<b>", City, "</b><br>",
"Store Name:<b>", Store.Name, "</b><br>"))
})
output$map <- renderLeaflet({
starbucks_icon <- makeIcon(iconUrl = "starbucks.png",
iconWidth = 30,
iconHeight = 30)
leaflet(data = filtered()) %>%
addTiles() %>%
addMarkers(lat = ~Latitude,
lng = ~Longitude,
icon = starbucks_icon,
label = ~lapply(description, HTML),
clusterOptions = markerClusterOptions())
})
# render the second object defined in tab two
## todo:
## output$SOME_NAME_TWO <-
filtered2 <- reactive({
if(input$drink == "All") {
drinks %>%
select(Beverage_Category, Beverage, Beverage_Prep, input$filter)
}
else {
drinks %>%
filter(Beverage_Category == input$drink) %>%
select(Beverage_Category, Beverage, Beverage_Prep, input$filter)
}
})
output$table <- renderDataTable({
filtered2()
})
# render the third object defined in tab three
## todo:
##output$SOME_NAME_THREE <-
filtered3 <- reactive({
ifelse(
input$choice == "All",
food,
food %>%
filter(Food == input$choice)
)
food %>%
select(Food, input$specify)
})
output$table2 <- renderDataTable({
filtered3()
})
output$bargraph3 <- renderPlot({
filtered_data <- filter(caffeine_data_num, Beverage_Category == input$drink_type)
ggplot(data = filtered_data) +
geom_col(mapping = aes(
x = Beverage, y = num_expresso_shot,
fill = Beverage
)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(
title = paste(
"Amount of Caffeine Measured in Expresso Shots for", input$drink_type
), # plot title
x = input$drink_type, # x-axis label
y = "Amount of Caffeine Measured in Expresso Shots"
)
})
output$table4 <- renderDataTable({
select(caffeine_varies, Beverage_Category, Beverage)
})
output$bar_graph5 <- renderPlot({
ggplot(data = avg_caffeine) +
geom_col(mapping = aes(
x = Beverage_Category, y = avg_expresso_shot,
fill = Beverage_Category
)) +
labs(
title = paste(
"Average Amount of Caffeine Measured in Shots for Each Beverage Category"
), # plot title
x = "Beverage Categories", # x-axis label
y = "Amount of Caffeine Measured in Shots " # y-axis label
)
})
})
runApp()
runApp()
library(shiny)
library(leaflet)
source("prepare_map.R")
source("prepare_table.R")
# introduction
intro <- tabPanel(
"Introduction",
fluidPage(
h1("The Starbucks Project")
)
)
# first page
tab_one <- tabPanel(
# tab naming
"Map",
# title of tab
titlePanel("Location in Each Country"),
# sidebar layout
sidebarLayout(
# sidebar panel
sidebarPanel(
# inputs that we would like to implement (eg. selectInput, sliderInput)
selectInput(
inputId = "search",
label = "Find a Country",
choices = select_values,
selected = "United States Of America"
),
checkboxGroupInput(
inputId = "check",
label = "Ownership Type",
choices = list("Licensed" = ownerships[1],
"Joint Venture" = ownerships[2],
"Company Owned" = ownerships[3],
"Franchise" = ownerships[4]),
selected = ownerships
)
),
# give a name to be passed to the server(output)
mainPanel(
leafletOutput("map")
)
)
)
# second page
tab_two <- tabPanel(
# tab naming
"Drinks",
# title of tab
titlePanel("Drink Nutritional Facts"),
# sidebar layout
sidebarLayout(
# sidebar panel
sidebarPanel(
selectInput(
inputId = "drink",
label = "Drink Category",
choices = types,
selected = types[1]
),
checkboxGroupInput(
inputId = "filter",
label = "Filter:",
choices = colnames(drinks)[4:18],
selected = colnames(drinks)[4:18]
)
),
mainPanel(
dataTableOutput("table")
)
)
)
# third page
tab_three <- tabPanel(
# tab naming
"Food",
# title of tab
titlePanel("Food Nutritional Facts"),
# sidebar layout
sidebarLayout(
# sidebar panel
sidebarPanel(
# inputs that we would like to implement (eg. selectInput, sliderInput)
selectInput(
inputId = "choice",
label = "Food Category",
choices = items,
selected = items[1]
),
checkboxGroupInput(
inputId = "specify",
label = "Filter:",
choices = colnames(food)[2:6],
selected = colnames(food)[2:6]
)
),
# give a name to be passed to the server(output)
mainPanel(
# plotlyOutput("name")
dataTableOutput("table2")
)
)
)
tab_four <- tabPanel(
"Measuring Caffeine", # label for the tab in the navbar
h2("Measuing Caffeine in Expresso Shots"), # show with a displayed title
# This content uses a sidebar layout
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "drink_type",
label = "Beverage Category",
selected = types[1],
choices = types[2:10]
)
),
mainPanel(
plotOutput("bargraph3"),
h3("Caffeine Varies in These Drinks"),
dataTableOutput("table4"),
plotOutput("bar_graph5"),
text("This bar graph just gives a estimated comparison between
which type of Starbucks drink typically have more caffeine.
It does not include data on drinks that do not have a set
amount of caffeine because it varies.")
)
)
)
# Final Project Shiny structure
shinyUI(navbarPage(
strong("Starbucks"),
# introduction
intro,
# first tab
tab_one,
# second tab
tab_two,
# third tab
tab_three,
# fourth tab
tab_four
))
runApp()
runApp()
runApp()
